/**
 * Generated by orval v7.6.0 🍺
 * Do not edit manually.
 * Carnahall
 * OpenAPI spec version: 0.0.1
 */
export type PostInscricoesBody = {
  nome: string;
  email: string;
  /** @nullable */
  referencia?: string | null;
};

export type PostInscricoes201 = {
  inscritoId: string;
};

/**
 * @nullable
 */
export type GetConvitesInscritoId302 = typeof GetConvitesInscritoId302[keyof typeof GetConvitesInscritoId302] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConvitesInscritoId302 = {
  null: 'null',
} as const;

export type GetInscritosInscritoIdRankingClicks200 = {
  contagem: number;
};

export type GetInscritosInscritoIdRankingContagem200 = {
  contagem: number;
};

export type GetInscritosInscritoIdRankingPosicao200 = {
  /** @nullable */
  position: number | null;
};

export type GetRanking200RankingItem = {
  id: string;
  nome: string;
  pontuacao: number;
};

export type GetRanking200 = {
  ranking: GetRanking200RankingItem[];
};

/**
 * @summary Inscreve alguém para o evento
 */
export const getPostInscricoesUrl = () => {


  

  return 'http://localhost:3333/inscricoes'
}

export const postInscricoes = async (postInscricoesBody: PostInscricoesBody, options?: RequestInit): Promise<PostInscricoes201> => {
  
  const res = await fetch(getPostInscricoesUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postInscricoesBody,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: PostInscricoes201 = body ? JSON.parse(body) : {}

  return data
}



/**
 * @summary Link de convite e redirecionamento do usuário
 */
export const getGetConvitesInscritoIdUrl = (inscritoId: string,) => {


  

  return `http://localhost:3333/convites/${inscritoId}`
}

export const getConvitesInscritoId = async (inscritoId: string, options?: RequestInit): Promise<unknown> => {
  
  const res = await fetch(getGetConvitesInscritoIdUrl(inscritoId),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: unknown = body ? JSON.parse(body) : {}

  return data
}



/**
 * @summary Contagem de clicks de um convite
 */
export const getGetInscritosInscritoIdRankingClicksUrl = (inscritoId: string,) => {


  

  return `http://localhost:3333/inscritos/${inscritoId}/ranking/clicks`
}

export const getInscritosInscritoIdRankingClicks = async (inscritoId: string, options?: RequestInit): Promise<GetInscritosInscritoIdRankingClicks200> => {
  
  const res = await fetch(getGetInscritosInscritoIdRankingClicksUrl(inscritoId),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetInscritosInscritoIdRankingClicks200 = body ? JSON.parse(body) : {}

  return data
}



/**
 * @summary Contagem de convites
 */
export const getGetInscritosInscritoIdRankingContagemUrl = (inscritoId: string,) => {


  

  return `http://localhost:3333/inscritos/${inscritoId}/ranking/contagem`
}

export const getInscritosInscritoIdRankingContagem = async (inscritoId: string, options?: RequestInit): Promise<GetInscritosInscritoIdRankingContagem200> => {
  
  const res = await fetch(getGetInscritosInscritoIdRankingContagemUrl(inscritoId),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetInscritosInscritoIdRankingContagem200 = body ? JSON.parse(body) : {}

  return data
}



/**
 * @summary Posição no ranking do inscrito
 */
export const getGetInscritosInscritoIdRankingPosicaoUrl = (inscritoId: string,) => {


  

  return `http://localhost:3333/inscritos/${inscritoId}/ranking/posicao`
}

export const getInscritosInscritoIdRankingPosicao = async (inscritoId: string, options?: RequestInit): Promise<GetInscritosInscritoIdRankingPosicao200> => {
  
  const res = await fetch(getGetInscritosInscritoIdRankingPosicaoUrl(inscritoId),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetInscritosInscritoIdRankingPosicao200 = body ? JSON.parse(body) : {}

  return data
}



/**
 * @summary Ranking
 */
export const getGetRankingUrl = () => {


  

  return 'http://localhost:3333/ranking'
}

export const getRanking = async ( options?: RequestInit): Promise<GetRanking200> => {
  
  const res = await fetch(getGetRankingUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetRanking200 = body ? JSON.parse(body) : {}

  return data
}



export const getGetHealthUrl = () => {


  

  return 'http://localhost:3333/health'
}

export const getHealth = async ( options?: RequestInit): Promise<void> => {
  
  const res = await fetch(getGetHealthUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: void = body ? JSON.parse(body) : {}

  return data
}



export const getGetUrl = () => {


  

  return 'http://localhost:3333/'
}

export const get = async ( options?: RequestInit): Promise<void> => {
  
  const res = await fetch(getGetUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: void = body ? JSON.parse(body) : {}

  return data
}
